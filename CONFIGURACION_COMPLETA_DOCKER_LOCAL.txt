============================================
OPEN DOORS - CONFIGURACI√ìN COMPLETA DOCKER LOCAL
Sistema de Facturaci√≥n con Azure AI
============================================

üìã CONTENIDO:
1. Requisitos Previos
2. Instalaci√≥n R√°pida (3 pasos)
3. Configuraci√≥n Detallada
4. Credenciales de Acceso
5. Arquitectura del Sistema
6. Comandos √ötiles
7. Migraci√≥n a Hostinger Cloud
8. Soluci√≥n de Problemas

============================================
1. REQUISITOS PREVIOS
============================================

‚úÖ Software Necesario:
   - Docker Desktop (Windows/Mac/Linux): https://www.docker.com/products/docker-desktop
   - Git: https://git-scm.com/downloads
   - Node.js 18+ (opcional, solo si no usas Docker): https://nodejs.org
   - Python 3.11+ (opcional, solo si no usas Docker): https://python.org

‚úÖ Recursos M√≠nimos:
   - RAM: 4GB (8GB recomendado)
   - Disco: 10GB libre
   - CPU: 2 cores (4 cores recomendado)

‚úÖ Credenciales de Azure (YA CONFIGURADAS):
   - Azure OpenAI API Key ‚úÖ
   - Azure Document Intelligence Key ‚úÖ
   - Azure Cognitive Search Key ‚úÖ
   - Azure Storage Account Key ‚úÖ

============================================
2. INSTALACI√ìN R√ÅPIDA (3 PASOS)
============================================

PASO 1: Clonar/Descargar el Proyecto
-------------------------------------
# Desde Replit (Descargar ZIP):
1. Click en "Files" ‚Üí "Download as ZIP"
2. Extraer en tu carpeta deseada
3. Abrir terminal en esa carpeta

# O desde Git (si tienes repositorio):
git clone <url-del-repo>
cd open-doors-billing

PASO 2: Configurar Variables de Entorno
----------------------------------------
# Opci√≥n A - Usar plantilla Docker (RECOMENDADO):
cp .env.docker .env

# Opci√≥n B - Usar plantilla general:
cp .env.example .env

# Editar .env y completar estas variables:
# IMPORTANTE: El script startup.sh generar√° SECRET_KEY autom√°ticamente si falta

# Si est√°s en Replit, las credenciales de Azure YA est√°n configuradas
# Si est√°s en local, debes agregarlas manualmente al .env

# Variables m√≠nimas requeridas:
POSTGRES_USER=opendoors_user
POSTGRES_PASSWORD=opendoors_password
SECRET_KEY=<se genera autom√°ticamente o usar: openssl rand -hex 32>

PASO 3: Iniciar Sistema Completo
----------------------------------
# En Linux/Mac:
chmod +x scripts/startup.sh
./scripts/startup.sh

# En Windows:
# Usar Git Bash o WSL, o ejecutar manualmente:
docker-compose up -d

üéâ ¬°LISTO! El sistema estar√° disponible en:
   - Frontend: http://localhost:5000
   - Backend API: http://localhost:8000
   - API Docs: http://localhost:8000/docs
   - pgAdmin: http://localhost:5050

============================================
3. CONFIGURACI√ìN DETALLADA
============================================

ESTRUCTURA DE ARCHIVOS:
-----------------------
open-doors-billing/
‚îú‚îÄ‚îÄ .env                          # Variables de entorno (crear desde .env.docker)
‚îú‚îÄ‚îÄ .env.docker                   # Plantilla para Docker (RECOMENDADO)
‚îú‚îÄ‚îÄ .env.example                  # Plantilla general
‚îú‚îÄ‚îÄ .dockerignore                 # Exclusiones para build del backend
‚îú‚îÄ‚îÄ docker-compose.yml            # Configuraci√≥n Docker COMPLETA (incluye pgAdmin)
‚îú‚îÄ‚îÄ Dockerfile.backend            # Imagen del backend (FastAPI)
‚îú‚îÄ‚îÄ frontend/
‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile               # Imagen del frontend (React)
‚îÇ   ‚îú‚îÄ‚îÄ .dockerignore            # Exclusiones para build del frontend
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îú‚îÄ‚îÄ scripts/
‚îÇ   ‚îú‚îÄ‚îÄ startup.sh               # ‚≠ê Script de inicio con auto-reparaci√≥n
‚îÇ   ‚îú‚îÄ‚îÄ export_hostinger.sh      # Exportaci√≥n a Hostinger Cloud
‚îÇ   ‚îî‚îÄ‚îÄ init.sql                 # Inicializaci√≥n de BD
‚îú‚îÄ‚îÄ src/                         # C√≥digo fuente del backend
‚îú‚îÄ‚îÄ requirements.txt             # Dependencias Python
‚îî‚îÄ‚îÄ CONFIGURACION_COMPLETA_DOCKER_LOCAL.txt  # ‚≠ê ESTE ARCHIVO

ARCHIVO .env COMPLETO:
----------------------
NOTA: Usar .env.docker como plantilla (cp .env.docker .env)

# Base de Datos Local (Docker PostgreSQL)
POSTGRES_USER=opendoors_user
POSTGRES_PASSWORD=opendoors_password
POSTGRES_SERVER=db
POSTGRES_PORT=5432
POSTGRES_DB=opendoors_db

# pgAdmin (Interfaz Gr√°fica para PostgreSQL)
PGADMIN_EMAIL=admin@opendoors.com
PGADMIN_PASSWORD=admin

# Seguridad JWT
# IMPORTANTE: El script startup.sh lo genera autom√°ticamente si falta
# O generar manualmente con: openssl rand -hex 32
SECRET_KEY=CAMBIAR_ESTO_CON_VALOR_GENERADO
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=10080

# CORS
ALLOWED_HOSTS=http://localhost:3000,http://localhost:5173,http://localhost:5000,http://localhost:8000

# Azure OpenAI (YA CONFIGURADO EN REPLIT COMO SECRETOS)
# En local, agregar tus credenciales:
AZURE_OPENAI_ENDPOINT=
AZURE_OPENAI_API_KEY=
AZURE_OPENAI_DEPLOYMENT_NAME=gpt-4o
OPENAI_API_VERSION=2024-02-01

# Azure Document Intelligence (YA CONFIGURADO EN REPLIT)
AZURE_DOC_INTELLIGENCE_ENDPOINT=
AZURE_DOC_INTELLIGENCE_KEY=

# Azure Cognitive Search (YA CONFIGURADO EN REPLIT)
AZURE_SEARCH_ENDPOINT=
AZURE_SEARCH_ADMIN_KEY=
AZURE_SEARCH_INDEX_NAME=opendoors-invoices

# Azure Storage (YA CONFIGURADO EN REPLIT)
AZURE_STORAGE_ACCOUNT_NAME=
AZURE_STORAGE_ACCOUNT_KEY=
AZURE_STORAGE_CONTAINER_NAME=invoices

# AFIP (Vac√≠o para desarrollo)
AFIP_TAX_ID=
AFIP_CERTIFICATE_PATH=
AFIP_PRIVATE_KEY_PATH=

# Configuraci√≥n General
DEBUG=True
LOG_LEVEL=INFO

SERVICIOS DOCKER:
-----------------
El sistema usa 4 contenedores Docker orquestados con docker-compose:

1. opendoors_db (PostgreSQL 16):
   - Base de datos principal
   - Puerto: 5432
   - Usuario: opendoors_user
   - Contrase√±a: opendoors_password
   - Healthcheck: pg_isready cada 10s
   - Volumen persistente: postgres_data

2. opendoors_pgadmin (pgAdmin 4):
   - Interfaz gr√°fica para PostgreSQL
   - Puerto: 5050
   - Email: admin@opendoors.com
   - Contrase√±a: admin
   - Volumen persistente: pgadmin_data

3. opendoors_backend (FastAPI):
   - API REST del sistema
   - Puerto: 8000 (¬°NO 8001!)
   - Hot-reload activado
   - Procesamiento de facturas con Azure AI
   - Healthcheck: /health endpoint cada 30s
   - Depende de: db (con condici√≥n healthy)

4. opendoors_frontend (React + Vite):
   - Interfaz de usuario
   - Puerto: 5000
   - Hot-reload activado (HMR)
   - Depende de: backend (con condici√≥n healthy)
   - Solo monta /src y /public (optimizado)

Red: opendoors_network (bridge)
Vol√∫menes: postgres_data, pgadmin_data (persistentes)

============================================
4. CREDENCIALES DE ACCESO
============================================

SUPERADMIN (Acceso Total):
---------------------------
Email:    cortsfranco@hotmail.com
Password: Ncc1701E@
Rol:      SUPERADMIN

PGADMIN (Gesti√≥n de Base de Datos):
------------------------------------
URL:      http://localhost:5050
Email:    admin@opendoors.com
Password: admin

Conectar a la base de datos desde pgAdmin:
- Host: db (o localhost si est√°s fuera de Docker)
- Port: 5432
- Database: opendoors_db
- Username: opendoors_user
- Password: opendoors_password

============================================
5. ARQUITECTURA DEL SISTEMA
============================================

STACK TECNOL√ìGICO:
------------------
Backend:
  - Python 3.11
  - FastAPI 0.104.1
  - SQLAlchemy 2.0 + SQLModel
  - PostgreSQL 16
  - AsyncPG (driver as√≠ncrono)
  - Azure OpenAI GPT-4o
  - Azure Document Intelligence
  - Azure Cognitive Search

Frontend:
  - React 18 + TypeScript
  - Vite
  - TanStack Query
  - Tailwind CSS
  - Axios

Infraestructura:
  - Docker + Docker Compose
  - PostgreSQL 16 (Alpine)
  - pgAdmin 4
  - Nginx (futuro, para producci√≥n)

FLUJO DE PROCESAMIENTO DE FACTURAS:
------------------------------------
1. Usuario sube PDF/imagen de factura
2. Frontend env√≠a a: POST /api/v1/invoices/upload
3. Backend guarda archivo temporalmente
4. Azure Document Intelligence extrae datos del PDF:
   - Tipo de factura (A/B/C)
   - Fecha de emisi√≥n
   - Proveedor/Cliente
   - Subtotal, IVA, Total
   - Punto de venta y n√∫mero
5. Azure OpenAI valida y estructura datos
6. Sistema calcula:
   - Balance IVA (solo facturas tipo A)
   - Balance General (solo movimiento_cuenta=SI)
   - Formato argentino ($1.234,56)
7. Datos se guardan en PostgreSQL
8. Frontend actualiza dashboard en tiempo real

L√ìGICA FISCAL ARGENTINA (Seg√∫n Joni):
--------------------------------------
‚úÖ BALANCE IVA:
   - SOLO facturas tipo A (IVA discriminado)
   - F√≥rmula: IVA emitido - IVA recibido
   - Excluye facturas con es_compensacion_iva=True
   
‚úÖ BALANCE GENERAL:
   - SOLO facturas con movimiento_cuenta=SI
   - Representa flujo de caja real
   - F√≥rmula: Ingresos - Egresos (solo mov. reales)

‚úÖ TIPOS DE FACTURA:
   - Tipo A: Con IVA discriminado ‚Üí Cuenta para Balance IVA
   - Tipo B: IVA incluido ‚Üí NO cuenta para Balance IVA
   - Tipo C: Sin IVA ‚Üí NO cuenta para Balance IVA
   - Tipo X: Otros comprobantes

============================================
6. COMANDOS √öTILES
============================================

GESTI√ìN DE DOCKER:
------------------
# Iniciar todo el sistema
./scripts/startup.sh
# o manualmente:
docker-compose up -d

# Ver logs en tiempo real
docker-compose logs -f

# Ver logs de un servicio espec√≠fico
docker-compose logs -f backend
docker-compose logs -f frontend
docker-compose logs -f db

# Reiniciar un servicio
docker-compose restart backend

# Detener todo
docker-compose down

# Detener y eliminar vol√∫menes (¬°CUIDADO! Borra la BD)
docker-compose down -v

# Reconstruir im√°genes
docker-compose build --no-cache

# Ver estado de servicios
docker-compose ps

# Ejecutar comando en contenedor
docker-compose exec backend python -c "print('Hola')"
docker-compose exec db psql -U opendoors_user -d opendoors_db

GESTI√ìN DE BASE DE DATOS:
--------------------------
# Backup completo
docker-compose exec db pg_dump -U opendoors_user opendoors_db > backup.sql

# Restaurar backup
docker-compose exec -T db psql -U opendoors_user opendoors_db < backup.sql

# Conectar a PostgreSQL desde terminal
docker-compose exec db psql -U opendoors_user -d opendoors_db

# Exportar para Hostinger
./scripts/export_hostinger.sh

DESARROLLO:
-----------
# Instalar dependencias Python (backend)
pip install -r requirements.txt

# Instalar dependencias Node (frontend)
cd frontend && npm install

# Ejecutar migraciones
docker-compose exec backend python -c "
import asyncio
from src.core.database import init_db
asyncio.run(init_db())
"

# Crear usuario manualmente
docker-compose exec backend python -c "
import asyncio
from src.models.user import User
from src.core.database import AsyncSessionLocal
from src.core.security import get_password_hash

async def create_user():
    async with AsyncSessionLocal() as session:
        user = User(
            email='test@example.com',
            hashed_password=get_password_hash('password123'),
            full_name='Test User',
            role='VIEWER',
            is_active=True
        )
        session.add(user)
        await session.commit()
        print('Usuario creado')

asyncio.run(create_user())
"

TESTING:
--------
# Ejecutar tests (cuando est√©n implementados)
docker-compose exec backend pytest tests/ -v

# Test de autenticaci√≥n
curl -X POST http://localhost:8000/api/auth/login \
  -H "Content-Type: application/x-www-form-urlencoded" \
  -d "username=cortsfranco@hotmail.com&password=Ncc1701E@"

# Test de health check
curl http://localhost:8000/health

============================================
7. MIGRACI√ìN A HOSTINGER CLOUD
============================================

PASO A PASO:
------------
1. Exportar base de datos local:
   ./scripts/export_hostinger.sh

2. Esto genera:
   - exports/opendoors_backup_<fecha>.sql.gz (datos completos)
   - exports/opendoors_schema_<fecha>.sql (solo estructura)
   - exports/INSTRUCCIONES_HOSTINGER_<fecha>.txt

3. Obtener credenciales de Hostinger Cloud PostgreSQL:
   - Host: <hostinger_host>
   - Port: 5432
   - Database: <hostinger_db>
   - Username: <hostinger_user>
   - Password: <hostinger_password>

4. Importar datos a Hostinger:
   
   Opci√≥n A - Desde l√≠nea de comandos:
   gunzip exports/opendoors_backup_*.sql.gz
   psql -h <hostinger_host> -U <hostinger_user> -d <hostinger_db> < exports/opendoors_backup_*.sql
   
   Opci√≥n B - Desde pgAdmin:
   a. Abrir http://localhost:5050
   b. Conectar a servidor Hostinger
   c. Click derecho en BD ‚Üí Restore
   d. Seleccionar archivo .sql

5. Actualizar .env con credenciales de Hostinger:
   POSTGRES_SERVER=<hostinger_host>
   POSTGRES_USER=<hostinger_user>
   POSTGRES_PASSWORD=<hostinger_password>
   POSTGRES_DB=<hostinger_db>
   DATABASE_URL=postgresql://<user>:<pass>@<host>:5432/<db>

6. Reiniciar backend:
   docker-compose restart backend

7. Verificar conexi√≥n:
   curl http://localhost:8000/health

IMPORTANTE - SSL en Hostinger:
-------------------------------
Si Hostinger requiere SSL, agregar a DATABASE_URL:
DATABASE_URL=postgresql://...?sslmode=require

Si hay problemas con certificado:
DATABASE_URL=postgresql://...?sslmode=require&ssl=true

============================================
8. SOLUCI√ìN DE PROBLEMAS
============================================

PROBLEMA: Docker no inicia / Contenedores no se crean
SOLUCI√ìN:
  - Verificar que Docker Desktop est√© corriendo
  - Verificar puertos no est√©n en uso: 5000, 8000, 5432, 5050
  - Ejecutar: docker-compose down -v && docker-compose up -d

PROBLEMA: Error "SECRET_KEY not found"
SOLUCI√ìN:
  - Generar SECRET_KEY: openssl rand -hex 32
  - Agregarlo a .env
  - Reiniciar backend: docker-compose restart backend

PROBLEMA: Base de datos no se conecta
SOLUCI√ìN:
  - Verificar logs: docker-compose logs db
  - Verificar que el contenedor est√© corriendo: docker-compose ps
  - Esperar 30 segundos (la BD tarda en iniciarse)
  - Forzar recreaci√≥n: docker-compose up -d --force-recreate db

PROBLEMA: Frontend muestra p√°gina en blanco
SOLUCI√ìN:
  - Verificar logs: docker-compose logs frontend
  - Limpiar cache del navegador (Ctrl+Shift+R)
  - Verificar que VITE_API_URL apunte a http://localhost:8000
  - Reconstruir imagen: docker-compose build --no-cache frontend

PROBLEMA: Backend retorna 401 Unauthorized en login
SOLUCI√ìN:
  - Verificar credenciales: cortsfranco@hotmail.com / Ncc1701E@
  - Verificar que el superusuario exista en la BD
  - Ejecutar startup.sh que crea el superusuario autom√°ticamente

PROBLEMA: Error de migraci√≥n de base de datos
SOLUCI√ìN:
  - Forzar recreaci√≥n de tablas:
    docker-compose exec backend python -c "
    import asyncio
    from src.core.database import engine, Base
    async def reset():
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.drop_all)
            await conn.run_sync(Base.metadata.create_all)
    asyncio.run(reset())
    "

PROBLEMA: Azure AI no procesa facturas
SOLUCI√ìN:
  - Verificar que las credenciales de Azure est√©n en .env
  - Verificar logs: docker-compose logs backend | grep -i azure
  - Verificar cuota de Azure OpenAI en portal.azure.com
  - Probar endpoint manualmente: POST http://localhost:8000/api/v1/invoices/upload

PROBLEMA: Puerto 5000 ya en uso
SOLUCI√ìN:
  - Cambiar puerto en docker-compose.override.yml:
    frontend:
      ports:
        - "3001:5000"  # Cambia 3001 por el puerto que quieras
  - Actualizar VITE_API_URL en consecuencia

PROBLEMA: Cambios en c√≥digo no se reflejan
SOLUCI√ìN:
  - Verificar que los vol√∫menes est√©n montados correctamente
  - Para backend: Los cambios son autom√°ticos (hot-reload)
  - Para frontend: Los cambios son autom√°ticos (Vite HMR)
  - Si no funciona: docker-compose restart <servicio>

============================================
CONTACTO Y SOPORTE
============================================

Superadmin: Franco Corts (cortsfranco@hotmail.com)

Documentaci√≥n adicional:
  - replit.md - Estado del proyecto
  - GUIA_COMPLETA_REPLICACION.txt - Gu√≠a de replicaci√≥n Parte 1
  - GUIA_PARTE_2_ENDPOINTS_FRONTEND.txt - Gu√≠a Parte 2
  - GUIA_PARTE_3_GRAFICAS_DEPLOYMENT.txt - Gu√≠a Parte 3

============================================
√öLTIMA ACTUALIZACI√ìN: 03 de Octubre 2025
VERSI√ìN: 1.0.0
ESTADO: ‚úÖ Sistema Funcional con Docker Local
============================================
