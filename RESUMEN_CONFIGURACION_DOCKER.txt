============================================
‚úÖ FASE 1 COMPLETADA - OPEN DOORS DOCKER LOCAL
Sistema Aprobado por Arquitecto
============================================

üì¶ ARCHIVOS GENERADOS PARA TU ENTORNO LOCAL:

1. üê≥ CONFIGURACI√ìN DOCKER:
   ‚îú‚îÄ‚îÄ docker-compose.yml              ‚≠ê Configuraci√≥n completa (4 servicios)
   ‚îú‚îÄ‚îÄ Dockerfile.backend               ‚≠ê Imagen FastAPI optimizada
   ‚îú‚îÄ‚îÄ frontend/Dockerfile              ‚≠ê Imagen React/Vite
   ‚îú‚îÄ‚îÄ .dockerignore                    ‚≠ê Exclusiones backend
   ‚îî‚îÄ‚îÄ frontend/.dockerignore           ‚≠ê Exclusiones frontend

2. üîß VARIABLES DE ENTORNO:
   ‚îú‚îÄ‚îÄ .env.docker                      ‚≠ê Plantilla Docker (USAR ESTA)
   ‚îî‚îÄ‚îÄ .env.example                     ‚≠ê Plantilla general

3. üìú SCRIPTS DE AUTOMATIZACI√ìN:
   ‚îú‚îÄ‚îÄ scripts/startup.sh               ‚≠ê Inicio autom√°tico con auto-reparaci√≥n
   ‚îú‚îÄ‚îÄ scripts/export_hostinger.sh      ‚≠ê Exportar BD a Hostinger Cloud
   ‚îî‚îÄ‚îÄ scripts/init.sql                 ‚≠ê Inicializaci√≥n PostgreSQL

4. üìñ DOCUMENTACI√ìN COMPLETA:
   ‚îú‚îÄ‚îÄ CONFIGURACION_COMPLETA_DOCKER_LOCAL.txt  ‚≠ê Gu√≠a paso a paso COMPLETA
   ‚îî‚îÄ‚îÄ RESUMEN_CONFIGURACION_DOCKER.txt         ‚≠ê Este archivo

============================================
üöÄ C√ìMO USAR ESTA CONFIGURACI√ìN:
============================================

PASO 1: Descargar c√≥digo desde Replit
--------------------------------------
1. Click en "Files" ‚Üí "Download as ZIP"
2. Extraer en tu carpeta local
3. O usar Git: git clone <url-del-repo>

PASO 2: Configurar variables de entorno
----------------------------------------
cd open-doors-billing
cp .env.docker .env

# El archivo .env YA tiene estructura completa
# Solo necesitas agregar credenciales de Azure si no est√°s en Replit
# (En Replit ya est√°n como secretos)

PASO 3: Iniciar sistema completo
---------------------------------
# Linux/Mac:
chmod +x scripts/*.sh
./scripts/startup.sh

# Windows (Git Bash):
bash scripts/startup.sh

# Manual (si startup.sh falla):
docker-compose up -d

============================================
üåê SERVICIOS DISPONIBLES:
============================================

‚úÖ PostgreSQL:  localhost:5432
   Usuario: opendoors_user
   Password: opendoors_password
   Base de datos: opendoors_db

‚úÖ pgAdmin:     http://localhost:5050
   Email: admin@opendoors.com
   Password: admin

‚úÖ Backend API: http://localhost:8000
   Docs: http://localhost:8000/docs
   Health: http://localhost:8000/health

‚úÖ Frontend:    http://localhost:5000
   UI completa de Open Doors

============================================
üë§ CREDENCIALES DE ACCESO:
============================================

SUPERADMIN (Full Access):
Email:    cortsfranco@hotmail.com
Password: Ncc1701E@

‚ö†Ô∏è IMPORTANTE: Cambiar esta contrase√±a despu√©s del primer login

============================================
üîÑ MIGRACI√ìN A HOSTINGER CLOUD:
============================================

PASO 1: Exportar base de datos local
-------------------------------------
./scripts/export_hostinger.sh

Esto genera:
- exports/opendoors_backup_<fecha>.sql.gz (datos completos)
- exports/opendoors_schema_<fecha>.sql (solo estructura)
- exports/INSTRUCCIONES_HOSTINGER_<fecha>.txt

PASO 2: Obtener credenciales Hostinger
---------------------------------------
- Host: <hostinger_host>
- Port: 5432
- Database: <hostinger_db>
- Username: <hostinger_user>
- Password: <hostinger_password>

PASO 3: Importar a Hostinger
-----------------------------
# Opci√≥n A - L√≠nea de comandos:
gunzip exports/opendoors_backup_*.sql.gz
psql -h <hostinger_host> -U <hostinger_user> -d <hostinger_db> < exports/opendoors_backup_*.sql

# Opci√≥n B - pgAdmin (http://localhost:5050):
1. Conectar a servidor Hostinger
2. Click derecho en BD ‚Üí Restore
3. Seleccionar archivo .sql

PASO 4: Actualizar .env
-----------------------
POSTGRES_SERVER=<hostinger_host>
POSTGRES_USER=<hostinger_user>
POSTGRES_PASSWORD=<hostinger_password>
POSTGRES_DB=<hostinger_db>
DATABASE_URL=postgresql://<user>:<pass>@<host>:5432/<db>

PASO 5: Reiniciar backend
--------------------------
docker-compose restart backend

============================================
üõ†Ô∏è COMANDOS √öTILES:
============================================

# Ver logs en tiempo real
docker-compose logs -f

# Ver logs de un servicio
docker-compose logs -f backend
docker-compose logs -f frontend

# Reiniciar un servicio
docker-compose restart backend

# Detener todo
docker-compose down

# Detener y eliminar vol√∫menes (¬°CUIDADO! Borra BD)
docker-compose down -v

# Reconstruir im√°genes
docker-compose build

# Conectar a PostgreSQL
docker-compose exec db psql -U opendoors_user -d opendoors_db

# Backup manual
docker-compose exec db pg_dump -U opendoors_user opendoors_db > backup.sql

============================================
‚úÖ CARACTER√çSTICAS IMPLEMENTADAS:
============================================

üê≥ Docker & Base de Datos:
- 4 servicios Docker orquestados
- PostgreSQL 16 con healthcheck
- pgAdmin 4 para gesti√≥n visual
- Vol√∫menes persistentes (postgres_data, pgadmin_data)
- Red bridge personalizada (opendoors_network)
- Variables de entorno parametrizadas

üîß Backend (FastAPI):
- Hot-reload activado
- Healthcheck: wget http://127.0.0.1:8000/health
- Procesamiento Azure AI listo
- Migraciones autom√°ticas
- Superusuario creado autom√°ticamente

üåê Frontend (React + Vite):
- Hot-reload (HMR) activado
- Depende de backend healthy
- Vol√∫menes optimizados (/src, /public)
- API URL: http://localhost:8000

üìú Scripts:
- startup.sh: Daemon de auto-reparaci√≥n continuo
  * Monitorea: JWT errors, DB errors, Migration errors
  * Soporte multiplataforma (Mac/Linux/Windows)
  * Generaci√≥n autom√°tica SECRET_KEY
  * L√≠mite de 5 errores antes de detener
  
- export_hostinger.sh: Exportaci√≥n a Hostinger Cloud
  * Usa variables de entorno din√°micas
  * Genera backup completo + schema-only
  * Incluye instrucciones detalladas
  * PGPASSWORD configurado correctamente

============================================
‚ö†Ô∏è NOTAS IMPORTANTES:
============================================

1. BASE DE DATOS NEON DESHABILITADA:
   La BD Neon en Replit est√° deshabilitada.
   El sistema ahora usa PostgreSQL local en Docker.

2. CREDENCIALES AZURE:
   En Replit: Ya configuradas como secretos
   En local: Debes agregarlas al archivo .env

3. SECRET_KEY:
   El script startup.sh lo genera autom√°ticamente
   O generar manualmente: openssl rand -hex 32

4. PUERTOS:
   - Frontend: 5000 (NO 3000)
   - Backend: 8000 (NO 8001)
   - PostgreSQL: 5432
   - pgAdmin: 5050

5. HEALTHCHECKS:
   - DB: pg_isready cada 10s
   - Backend: wget http://127.0.0.1:8000/health cada 30s
   - Frontend depende de backend healthy

============================================
üìã PR√ìXIMAS FASES (Pendientes):
============================================

üîÆ FASE 2: Azure AI & Procesamiento de Facturas
- Integrar Azure Document Intelligence
- Validaci√≥n por tipo de factura (A/B/C)
- Normalizaci√≥n formato argentino ($1.234,56)

üé® FASE 3: UI/UX Coherente
- Sistema de dise√±o Tailwind unificado
- Componentes compartidos (DataTable, Cards, Forms)
- Responsividad completa (mobile/tablet/desktop)

üìä FASE 4: L√≥gica Fiscal Argentina
- Balance IVA (solo tipo A, excluir es_compensacion_iva=True)
- Balance General (solo movimiento_cuenta='SI')
- Tests de aceptaci√≥n completos

============================================
üÜò SOLUCI√ìN DE PROBLEMAS:
============================================

PROBLEMA: Docker no inicia
SOLUCI√ìN:
  - Verificar Docker Desktop corriendo
  - Verificar puertos libres: 5000, 8000, 5432, 5050
  - docker-compose down -v && docker-compose up -d

PROBLEMA: Backend no responde
SOLUCI√ìN:
  - docker-compose logs backend
  - docker-compose restart backend
  - Verificar .env tiene SECRET_KEY

PROBLEMA: Frontend en blanco
SOLUCI√ìN:
  - docker-compose logs frontend
  - Limpiar cache navegador (Ctrl+Shift+R)
  - docker-compose restart frontend

PROBLEMA: No puedo conectar a BD
SOLUCI√ìN:
  - docker-compose logs db
  - Esperar 30s para inicializaci√≥n
  - docker-compose restart db backend

PROBLEMA: Error al exportar BD
SOLUCI√ìN:
  - Verificar .env tiene POSTGRES_PASSWORD
  - source .env && ./scripts/export_hostinger.sh

============================================
üìû SOPORTE:
============================================

Superadmin: Franco Corts (cortsfranco@hotmail.com)

Documentaci√≥n:
  - CONFIGURACION_COMPLETA_DOCKER_LOCAL.txt (Gu√≠a detallada)
  - replit.md (Estado del proyecto)
  - GUIA_COMPLETA_REPLICACION.txt (Parte 1)
  - GUIA_PARTE_2_ENDPOINTS_FRONTEND.txt (Parte 2)
  - GUIA_PARTE_3_GRAFICAS_DEPLOYMENT.txt (Parte 3)

============================================
√öLTIMA ACTUALIZACI√ìN: 03 Octubre 2025 - 22:45
ESTADO: ‚úÖ FASE 1 COMPLETADA Y APROBADA
ARQUITECTO: ‚úÖ Revisado y Aprobado
============================================
