================================================================================================
GUÍA PARTE 2 - ENDPOINTS FALTANTES Y FRONTEND COMPLETO
================================================================================================
Continuación de GUIA_COMPLETA_REPLICACION.txt
Cubre los puntos 6-20 de la lista (endpoints faltantes y frontend)

================================================================================================
PARTE 11: [⚠️] ENDPOINTS FALTANTES - INVOICES CRUD (PUNTO 6)
================================================================================================

11.1. CREAR src/api/routers/invoices.py
----------------------------------------
```python
from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_
from typing import List, Optional
from datetime import date, datetime

from src.core.database import get_session
from src.core.permissions import require_permission, Permission
from src.core.security import get_current_user
from src.models.user import User
from src.models.invoice import Invoice, TipoFactura, MovimientoCuenta
from src.services.financial_calculator import FinancialCalculator

router = APIRouter()

@router.get("/")
async def list_invoices(
    skip: int = Query(0),
    limit: int = Query(100),
    tipo_factura: Optional[TipoFactura] = None,
    socio: Optional[str] = None,
    fecha_desde: Optional[date] = None,
    fecha_hasta: Optional[date] = None,
    include_deleted: bool = False,
    session: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Lista todas las facturas con filtros"""
    query = select(Invoice)
    
    # Filtro de soft delete
    if not include_deleted:
        query = query.where(Invoice.deleted_at == None)
    
    # Filtros opcionales
    if tipo_factura:
        query = query.where(Invoice.tipo_factura == tipo_factura)
    if socio:
        query = query.where(Invoice.socio_responsable == socio)
    if fecha_desde:
        query = query.where(Invoice.fecha_emision >= fecha_desde)
    if fecha_hasta:
        query = query.where(Invoice.fecha_emision <= fecha_hasta)
    
    # Paginación
    query = query.offset(skip).limit(limit)
    
    result = await session.execute(query)
    invoices = result.scalars().all()
    
    return {
        "invoices": invoices,
        "total": len(invoices),
        "skip": skip,
        "limit": limit
    }

@router.get("/{invoice_id}")
async def get_invoice(
    invoice_id: int,
    session: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Obtiene una factura por ID"""
    query = select(Invoice).where(Invoice.id == invoice_id)
    result = await session.execute(query)
    invoice = result.scalar_one_or_none()
    
    if not invoice:
        raise HTTPException(status_code=404, detail="Factura no encontrada")
    
    # Validar coherencia de montos
    validacion = FinancialCalculator.validar_coherencia_montos(invoice)
    
    return {
        "invoice": invoice,
        "validacion_montos": validacion
    }

@router.post("/")
async def create_invoice(
    invoice_data: dict,
    session: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Crea una nueva factura"""
    # Validar permisos
    from src.core.permissions import has_permission
    if not has_permission(current_user, Permission.INVOICE_CREATE):
        raise HTTPException(status_code=403, detail="Sin permisos para crear facturas")
    
    # Crear invoice
    invoice = Invoice(**invoice_data, created_by=current_user.id)
    
    # Validar coherencia de montos
    validacion = FinancialCalculator.validar_coherencia_montos(invoice)
    if not validacion["es_coherente"]:
        raise HTTPException(
            status_code=400, 
            detail=f"Montos incoherentes: {validacion['mensaje']}"
        )
    
    session.add(invoice)
    await session.commit()
    await session.refresh(invoice)
    
    return {"invoice": invoice, "message": "Factura creada exitosamente"}

@router.put("/{invoice_id}")
async def update_invoice(
    invoice_id: int,
    invoice_data: dict,
    session: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Actualiza una factura"""
    from src.core.permissions import has_permission
    if not has_permission(current_user, Permission.INVOICE_EDIT):
        raise HTTPException(status_code=403, detail="Sin permisos para editar")
    
    query = select(Invoice).where(Invoice.id == invoice_id)
    result = await session.execute(query)
    invoice = result.scalar_one_or_none()
    
    if not invoice:
        raise HTTPException(status_code=404, detail="Factura no encontrada")
    
    # Actualizar campos
    for key, value in invoice_data.items():
        if hasattr(invoice, key):
            setattr(invoice, key, value)
    
    invoice.updated_at = datetime.utcnow()
    
    # Validar coherencia
    validacion = FinancialCalculator.validar_coherencia_montos(invoice)
    if not validacion["es_coherente"]:
        raise HTTPException(
            status_code=400, 
            detail=f"Montos incoherentes: {validacion['mensaje']}"
        )
    
    await session.commit()
    await session.refresh(invoice)
    
    return {"invoice": invoice, "message": "Factura actualizada"}

@router.delete("/{invoice_id}")
async def soft_delete_invoice(
    invoice_id: int,
    session: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Soft delete de una factura"""
    from src.core.permissions import has_permission
    if not has_permission(current_user, Permission.INVOICE_DELETE):
        raise HTTPException(status_code=403, detail="Sin permisos para eliminar")
    
    query = select(Invoice).where(Invoice.id == invoice_id)
    result = await session.execute(query)
    invoice = result.scalar_one_or_none()
    
    if not invoice:
        raise HTTPException(status_code=404, detail="Factura no encontrada")
    
    invoice.deleted_at = datetime.utcnow()
    await session.commit()
    
    return {"message": "Factura eliminada (soft delete)"}

@router.post("/{invoice_id}/restore")
async def restore_invoice(
    invoice_id: int,
    session: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Restaura una factura eliminada"""
    from src.core.permissions import has_permission
    if not has_permission(current_user, Permission.INVOICE_RESTORE):
        raise HTTPException(status_code=403, detail="Sin permisos para restaurar")
    
    query = select(Invoice).where(Invoice.id == invoice_id)
    result = await session.execute(query)
    invoice = result.scalar_one_or_none()
    
    if not invoice:
        raise HTTPException(status_code=404, detail="Factura no encontrada")
    
    invoice.deleted_at = None
    await session.commit()
    
    return {"message": "Factura restaurada"}

@router.post("/{invoice_id}/approve")
async def approve_invoice(
    invoice_id: int,
    session: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Aprueba una factura"""
    from src.core.permissions import has_permission
    if not has_permission(current_user, Permission.INVOICE_APPROVE):
        raise HTTPException(status_code=403, detail="Sin permisos para aprobar")
    
    query = select(Invoice).where(Invoice.id == invoice_id)
    result = await session.execute(query)
    invoice = result.scalar_one_or_none()
    
    if not invoice:
        raise HTTPException(status_code=404, detail="Factura no encontrada")
    
    invoice.aprobada = True
    invoice.aprobada_por = current_user.id
    invoice.fecha_aprobacion = datetime.utcnow()
    
    await session.commit()
    await session.refresh(invoice)
    
    return {"invoice": invoice, "message": "Factura aprobada"}
```

11.2. CREAR src/api/routers/partners.py
----------------------------------------
```python
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from typing import List

from src.core.database import get_session
from src.core.security import get_current_user
from src.models.user import User
from src.models.partner import PartnerProfile

router = APIRouter()

@router.get("/")
async def list_partners(
    session: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Lista todos los socios"""
    query = select(PartnerProfile)
    result = await session.execute(query)
    partners = result.scalars().all()
    return {"partners": partners}

@router.get("/{partner_id}")
async def get_partner(
    partner_id: int,
    session: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Obtiene un socio por ID"""
    query = select(PartnerProfile).where(PartnerProfile.id == partner_id)
    result = await session.execute(query)
    partner = result.scalar_one_or_none()
    
    if not partner:
        raise HTTPException(status_code=404, detail="Socio no encontrado")
    
    return {"partner": partner}

@router.post("/")
async def create_partner(
    partner_data: dict,
    session: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Crea un nuevo socio"""
    partner = PartnerProfile(**partner_data)
    session.add(partner)
    await session.commit()
    await session.refresh(partner)
    return {"partner": partner, "message": "Socio creado"}

@router.put("/{partner_id}")
async def update_partner(
    partner_id: int,
    partner_data: dict,
    session: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Actualiza un socio"""
    query = select(PartnerProfile).where(PartnerProfile.id == partner_id)
    result = await session.execute(query)
    partner = result.scalar_one_or_none()
    
    if not partner:
        raise HTTPException(status_code=404, detail="Socio no encontrado")
    
    for key, value in partner_data.items():
        if hasattr(partner, key):
            setattr(partner, key, value)
    
    await session.commit()
    await session.refresh(partner)
    return {"partner": partner, "message": "Socio actualizado"}
```

11.3. ACTUALIZAR src/main.py CON NUEVOS ROUTERS
------------------------------------------------
Agregar al main.py existente:

```python
# Agregar imports
from src.api.routers import invoices, partners

# Agregar registros de routers
app.include_router(invoices.router, prefix="/api/invoices", tags=["facturas"])
app.include_router(partners.router, prefix="/api/partners", tags=["socios"])
```

================================================================================================
PARTE 12: [⚠️] FRONTEND REACT - SETUP INICIAL (PUNTOS 13-15)
================================================================================================

12.1. CREAR PROYECTO FRONTEND
------------------------------
```bash
# Desde la raíz del proyecto
npx create-vite@latest frontend --template react-ts
cd frontend
npm install
```

12.2. INSTALAR DEPENDENCIAS NECESARIAS
---------------------------------------
```bash
npm install axios react-router-dom @tanstack/react-query
npm install recharts  # Para gráficas
npm install lucide-react  # Para iconos
npm install clsx tailwind-merge  # Para estilos
npm install react-hot-toast  # Para notificaciones

# Dev dependencies
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
```

12.3. CONFIGURAR TAILWIND (tailwind.config.js)
-----------------------------------------------
```javascript
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        // Colores del sistema según lógica fiscal
        income: {
          50: '#f0fdf4',
          100: '#dcfce7',
          500: '#22c55e',
          600: '#16a34a',
          700: '#15803d',
        },
        expense: {
          50: '#fef2f2',
          100: '#fee2e2',
          500: '#ef4444',
          600: '#dc2626',
          700: '#b91c1c',
        },
        iva: {
          50: '#fefce8',
          100: '#fef9c3',
          500: '#eab308',
          600: '#ca8a04',
          700: '#a16207',
        },
        balance: {
          50: '#eff6ff',
          100: '#dbeafe',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
        }
      }
    },
  },
  plugins: [],
}
```

12.4. [✅] CREAR DESIGN SYSTEM (PUNTO 14) - frontend/src/styles/design-system.css
----------------------------------------------------------------------------------
```css
/**
 * DESIGN SYSTEM - Open Doors Billing
 * Sistema de diseño consistente para toda la aplicación
 */

:root {
  /* ========== COLORES PRINCIPALES ========== */
  /* Income (Ingresos) - Verde */
  --color-income-50: #f0fdf4;
  --color-income-100: #dcfce7;
  --color-income-500: #22c55e;
  --color-income-600: #16a34a;
  --color-income-700: #15803d;
  
  /* Expense (Egresos) - Rojo */
  --color-expense-50: #fef2f2;
  --color-expense-100: #fee2e2;
  --color-expense-500: #ef4444;
  --color-expense-600: #dc2626;
  --color-expense-700: #b91c1c;
  
  /* IVA - Amarillo */
  --color-iva-50: #fefce8;
  --color-iva-100: #fef9c3;
  --color-iva-500: #eab308;
  --color-iva-600: #ca8a04;
  --color-iva-700: #a16207;
  
  /* Balance - Azul */
  --color-balance-50: #eff6ff;
  --color-balance-100: #dbeafe;
  --color-balance-500: #3b82f6;
  --color-balance-600: #2563eb;
  --color-balance-700: #1d4ed8;
  
  /* Neutrales */
  --color-gray-50: #f9fafb;
  --color-gray-100: #f3f4f6;
  --color-gray-200: #e5e7eb;
  --color-gray-300: #d1d5db;
  --color-gray-500: #6b7280;
  --color-gray-700: #374151;
  --color-gray-900: #111827;
  
  /* ========== SOMBRAS ========== */
  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1);
  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1);
  --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1);
  
  /* ========== ESPACIADO ========== */
  --spacing-xs: 0.25rem;   /* 4px */
  --spacing-sm: 0.5rem;    /* 8px */
  --spacing-md: 1rem;      /* 16px */
  --spacing-lg: 1.5rem;    /* 24px */
  --spacing-xl: 2rem;      /* 32px */
  --spacing-2xl: 3rem;     /* 48px */
  
  /* ========== BORDER RADIUS ========== */
  --radius-sm: 0.25rem;    /* 4px */
  --radius-md: 0.5rem;     /* 8px */
  --radius-lg: 0.75rem;    /* 12px */
  --radius-xl: 1rem;       /* 16px */
  
  /* ========== TRANSICIONES ========== */
  --transition-fast: 150ms ease-in-out;
  --transition-normal: 300ms ease-in-out;
  --transition-slow: 500ms ease-in-out;
}

/* ========== COMPONENTES GLOBALES ========== */

/* Cards */
.card {
  background: white;
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-md);
  padding: var(--spacing-lg);
  transition: all var(--transition-normal);
}

.card:hover {
  box-shadow: var(--shadow-lg);
  transform: translateY(-2px);
}

.card-income {
  border-left: 4px solid var(--color-income-500);
}

.card-expense {
  border-left: 4px solid var(--color-expense-500);
}

.card-iva {
  border-left: 4px solid var(--color-iva-500);
}

.card-balance {
  border-left: 4px solid var(--color-balance-500);
}

/* Botones */
.btn {
  padding: var(--spacing-sm) var(--spacing-md);
  border-radius: var(--radius-md);
  font-weight: 500;
  cursor: pointer;
  transition: all var(--transition-fast);
  border: none;
  display: inline-flex;
  align-items: center;
  gap: var(--spacing-sm);
}

.btn-primary {
  background: var(--color-balance-600);
  color: white;
}

.btn-primary:hover {
  background: var(--color-balance-700);
}

.btn-success {
  background: var(--color-income-600);
  color: white;
}

.btn-danger {
  background: var(--color-expense-600);
  color: white;
}

.btn-warning {
  background: var(--color-iva-600);
  color: white;
}

/* Inputs */
.input {
  padding: var(--spacing-sm) var(--spacing-md);
  border: 1px solid var(--color-gray-300);
  border-radius: var(--radius-md);
  font-size: 1rem;
  transition: all var(--transition-fast);
}

.input:focus {
  outline: none;
  border-color: var(--color-balance-500);
  box-shadow: 0 0 0 3px var(--color-balance-100);
}

.input-currency {
  font-family: 'Courier New', monospace;
  text-align: right;
}

/* Badges */
.badge {
  display: inline-block;
  padding: var(--spacing-xs) var(--spacing-sm);
  border-radius: var(--radius-sm);
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.badge-income {
  background: var(--color-income-100);
  color: var(--color-income-700);
}

.badge-expense {
  background: var(--color-expense-100);
  color: var(--color-expense-700);
}

.badge-pending {
  background: var(--color-iva-100);
  color: var(--color-iva-700);
}

/* Tablas */
.table {
  width: 100%;
  border-collapse: collapse;
}

.table th {
  background: var(--color-gray-50);
  padding: var(--spacing-md);
  text-align: left;
  font-weight: 600;
  color: var(--color-gray-700);
  border-bottom: 2px solid var(--color-gray-200);
}

.table td {
  padding: var(--spacing-md);
  border-bottom: 1px solid var(--color-gray-200);
}

.table tr:hover {
  background: var(--color-gray-50);
}

/* Loading Spinner */
.spinner {
  border: 3px solid var(--color-gray-200);
  border-top-color: var(--color-balance-600);
  border-radius: 50%;
  width: 2rem;
  height: 2rem;
  animation: spin 0.6s linear infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

/* Formato Moneda Argentina */
.currency-arg {
  font-family: 'Courier New', monospace;
  font-weight: 600;
}

.currency-arg.positive {
  color: var(--color-income-600);
}

.currency-arg.negative {
  color: var(--color-expense-600);
}
```

================================================================================================
PARTE 13: [⚠️] COMPONENTES REACT - CORE (PUNTO 15-16)
================================================================================================

13.1. [✅] CREAR COMPONENTE DataTable REUTILIZABLE (PUNTO 15)
--------------------------------------------------------------
frontend/src/components/DataTable.tsx:

```typescript
import React, { useState, useMemo } from 'react';
import { Search, ChevronUp, ChevronDown, Pencil, Trash2, Check } from 'lucide-react';

interface Column<T> {
  key: keyof T | string;
  label: string;
  sortable?: boolean;
  render?: (value: any, row: T) => React.ReactNode;
  editable?: boolean;
}

interface DataTableProps<T> {
  data: T[];
  columns: Column<T>[];
  onEdit?: (row: T) => void;
  onDelete?: (row: T) => void;
  onRowClick?: (row: T) => void;
  searchable?: boolean;
  selectable?: boolean;
  pagination?: boolean;
  pageSize?: number;
}

export function DataTable<T extends { id?: number | string }>({
  data,
  columns,
  onEdit,
  onDelete,
  onRowClick,
  searchable = true,
  selectable = false,
  pagination = true,
  pageSize = 10
}: DataTableProps<T>) {
  const [searchTerm, setSearchTerm] = useState('');
  const [sortColumn, setSortColumn] = useState<string | null>(null);
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedRows, setSelectedRows] = useState<Set<number | string>>(new Set());

  // Filtrado
  const filteredData = useMemo(() => {
    if (!searchTerm) return data;
    
    return data.filter(row => {
      return columns.some(col => {
        const value = (row as any)[col.key];
        return value?.toString().toLowerCase().includes(searchTerm.toLowerCase());
      });
    });
  }, [data, searchTerm, columns]);

  // Ordenamiento
  const sortedData = useMemo(() => {
    if (!sortColumn) return filteredData;
    
    return [...filteredData].sort((a, b) => {
      const aVal = (a as any)[sortColumn];
      const bVal = (b as any)[sortColumn];
      
      if (aVal < bVal) return sortDirection === 'asc' ? -1 : 1;
      if (aVal > bVal) return sortDirection === 'asc' ? 1 : -1;
      return 0;
    });
  }, [filteredData, sortColumn, sortDirection]);

  // Paginación
  const paginatedData = useMemo(() => {
    if (!pagination) return sortedData;
    
    const start = (currentPage - 1) * pageSize;
    return sortedData.slice(start, start + pageSize);
  }, [sortedData, currentPage, pageSize, pagination]);

  const totalPages = Math.ceil(sortedData.length / pageSize);

  const handleSort = (column: string) => {
    if (sortColumn === column) {
      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');
    } else {
      setSortColumn(column);
      setSortDirection('asc');
    }
  };

  const toggleRowSelection = (id: number | string) => {
    setSelectedRows(prev => {
      const newSet = new Set(prev);
      if (newSet.has(id)) {
        newSet.delete(id);
      } else {
        newSet.add(id);
      }
      return newSet;
    });
  };

  return (
    <div className="data-table-container">
      {/* Barra de búsqueda */}
      {searchable && (
        <div className="search-bar" style={{ marginBottom: 'var(--spacing-md)' }}>
          <div className="input-group">
            <Search size={20} />
            <input
              type="text"
              className="input"
              placeholder="Buscar..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>
      )}

      {/* Tabla */}
      <div className="table-wrapper" style={{ overflowX: 'auto' }}>
        <table className="table">
          <thead>
            <tr>
              {selectable && (
                <th style={{ width: '50px' }}>
                  <input type="checkbox" />
                </th>
              )}
              {columns.map((col) => (
                <th
                  key={col.key.toString()}
                  onClick={() => col.sortable && handleSort(col.key.toString())}
                  style={{ cursor: col.sortable ? 'pointer' : 'default' }}
                >
                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    {col.label}
                    {col.sortable && sortColumn === col.key && (
                      sortDirection === 'asc' ? <ChevronUp size={16} /> : <ChevronDown size={16} />
                    )}
                  </div>
                </th>
              ))}
              {(onEdit || onDelete) && <th style={{ width: '100px' }}>Acciones</th>}
            </tr>
          </thead>
          <tbody>
            {paginatedData.map((row) => (
              <tr
                key={row.id}
                onClick={() => onRowClick?.(row)}
                style={{ cursor: onRowClick ? 'pointer' : 'default' }}
              >
                {selectable && (
                  <td>
                    <input
                      type="checkbox"
                      checked={selectedRows.has(row.id!)}
                      onChange={() => toggleRowSelection(row.id!)}
                      onClick={(e) => e.stopPropagation()}
                    />
                  </td>
                )}
                {columns.map((col) => (
                  <td key={col.key.toString()}>
                    {col.render 
                      ? col.render((row as any)[col.key], row)
                      : (row as any)[col.key]
                    }
                  </td>
                ))}
                {(onEdit || onDelete) && (
                  <td>
                    <div style={{ display: 'flex', gap: '8px' }}>
                      {onEdit && (
                        <button
                          className="btn btn-sm"
                          onClick={(e) => {
                            e.stopPropagation();
                            onEdit(row);
                          }}
                        >
                          <Pencil size={16} />
                        </button>
                      )}
                      {onDelete && (
                        <button
                          className="btn btn-sm btn-danger"
                          onClick={(e) => {
                            e.stopPropagation();
                            onDelete(row);
                          }}
                        >
                          <Trash2 size={16} />
                        </button>
                      )}
                    </div>
                  </td>
                )}
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Paginación */}
      {pagination && totalPages > 1 && (
        <div className="pagination" style={{ 
          marginTop: 'var(--spacing-md)', 
          display: 'flex', 
          justifyContent: 'space-between',
          alignItems: 'center'
        }}>
          <div>
            Mostrando {((currentPage - 1) * pageSize) + 1} - {Math.min(currentPage * pageSize, sortedData.length)} de {sortedData.length}
          </div>
          <div style={{ display: 'flex', gap: '8px' }}>
            <button
              className="btn"
              onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
              disabled={currentPage === 1}
            >
              Anterior
            </button>
            <span style={{ padding: '8px 16px' }}>
              Página {currentPage} de {totalPages}
            </span>
            <button
              className="btn"
              onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
              disabled={currentPage === totalPages}
            >
              Siguiente
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
```

13.2. [✅] CREAR COMPONENTE CurrencyInput ARGENTINO (PUNTO 16)
---------------------------------------------------------------
frontend/src/components/CurrencyInput.tsx:

```typescript
import React, { useState, useEffect } from 'react';
import { DollarSign, AlertCircle, Check } from 'lucide-react';

interface CurrencyInputProps {
  value: number;
  onChange: (value: number) => void;
  label?: string;
  placeholder?: string;
  error?: string;
  disabled?: boolean;
}

export function CurrencyInput({
  value,
  onChange,
  label,
  placeholder = "$0,00",
  error,
  disabled = false
}: CurrencyInputProps) {
  const [inputValue, setInputValue] = useState('');
  const [isValid, setIsValid] = useState(true);
  const [formatDetected, setFormatDetected] = useState<'argentino' | 'inglés' | 'simple' | null>(null);

  // Convertir número a formato argentino
  const numberToArgentine = (num: number): string => {
    const parts = num.toFixed(2).split('.');
    const integerPart = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, '.');
    return `$${integerPart},${parts[1]}`;
  };

  // Parsear formato argentino a número
  const argentineToNumber = (str: string): { value: number; format: string } | null => {
    const cleaned = str.trim().replace('$', '').replace(/\s/g, '');
    
    // Formato argentino: 1.234,56
    if (/^\d{1,3}(?:\.\d{3})*,\d{2}$/.test(cleaned)) {
      const normalized = cleaned.replace(/\./g, '').replace(',', '.');
      return { value: parseFloat(normalized), format: 'argentino' };
    }
    
    // Formato inglés: 1,234.56 (auto-corrección)
    if (/^\d{1,3}(?:,\d{3})*\.\d{2}$/.test(cleaned)) {
      const normalized = cleaned.replace(/,/g, '');
      return { value: parseFloat(normalized), format: 'inglés' };
    }
    
    // Número simple
    try {
      const num = parseFloat(cleaned);
      if (!isNaN(num)) {
        return { value: num, format: 'simple' };
      }
    } catch {}
    
    return null;
  };

  // Inicializar valor
  useEffect(() => {
    if (value !== undefined && value !== null) {
      setInputValue(numberToArgentine(value));
    }
  }, [value]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setInputValue(newValue);

    // Validar y parsear
    const parsed = argentineToNumber(newValue);
    
    if (parsed) {
      setIsValid(true);
      setFormatDetected(parsed.format as any);
      onChange(parsed.value);
    } else {
      setIsValid(false);
      setFormatDetected(null);
    }
  };

  const handleBlur = () => {
    // Re-formatear al salir del input
    if (isValid && inputValue) {
      const parsed = argentineToNumber(inputValue);
      if (parsed) {
        setInputValue(numberToArgentine(parsed.value));
      }
    }
  };

  return (
    <div className="currency-input-container" style={{ marginBottom: 'var(--spacing-md)' }}>
      {label && (
        <label style={{ 
          display: 'block', 
          marginBottom: 'var(--spacing-sm)',
          fontWeight: 500,
          color: 'var(--color-gray-700)'
        }}>
          {label}
        </label>
      )}
      
      <div style={{ position: 'relative' }}>
        <div style={{ 
          position: 'absolute', 
          left: '12px', 
          top: '50%', 
          transform: 'translateY(-50%)',
          color: 'var(--color-gray-500)'
        }}>
          <DollarSign size={20} />
        </div>
        
        <input
          type="text"
          className={`input input-currency ${!isValid ? 'input-error' : ''}`}
          value={inputValue}
          onChange={handleChange}
          onBlur={handleBlur}
          placeholder={placeholder}
          disabled={disabled}
          style={{
            paddingLeft: '40px',
            paddingRight: '40px',
            fontFamily: 'Courier New, monospace'
          }}
        />
        
        <div style={{ 
          position: 'absolute', 
          right: '12px', 
          top: '50%', 
          transform: 'translateY(-50%)'
        }}>
          {isValid ? (
            <Check size={20} color="var(--color-income-600)" />
          ) : inputValue && (
            <AlertCircle size={20} color="var(--color-expense-600)" />
          )}
        </div>
      </div>

      {/* Mensajes de ayuda */}
      {formatDetected && formatDetected !== 'argentino' && (
        <div style={{ 
          marginTop: 'var(--spacing-xs)', 
          fontSize: '0.875rem',
          color: 'var(--color-iva-700)'
        }}>
          ℹ️ Formato {formatDetected} detectado y auto-corregido
        </div>
      )}
      
      {!isValid && inputValue && (
        <div style={{ 
          marginTop: 'var(--spacing-xs)', 
          fontSize: '0.875rem',
          color: 'var(--color-expense-600)'
        }}>
          ❌ Formato incorrecto. Use formato argentino: $1.234,56
        </div>
      )}
      
      {error && (
        <div style={{ 
          marginTop: 'var(--spacing-xs)', 
          fontSize: '0.875rem',
          color: 'var(--color-expense-600)'
        }}>
          {error}
        </div>
      )}
    </div>
  );
}
```

================================================================================================
CONTINUARÁ EN PARTE 3...
================================================================================================

Esta es la Parte 2 que cubre los puntos 6-16:
- [✅] Endpoints faltantes (invoices CRUD, partners)
- [✅] Setup de frontend React + TypeScript
- [✅] Design system completo (PUNTO 14)
- [✅] Componente DataTable reutilizable (PUNTO 15)
- [✅] Componente CurrencyInput argentino (PUNTO 16)

¿Continúo con la Parte 3 que incluye:
- Componentes de gráficas analíticas (puntos 21-25)
- Páginas completas del frontend (puntos 17-20, 26-30)
- Testing y deployment (puntos 31-33)?
