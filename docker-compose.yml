version: '3.8'

services:
  # Base de datos PostgreSQL
  db:
    image: postgres:14-alpine
    container_name: opendoors_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-opendoors_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-TuPasswordSegura}
      POSTGRES_DB: ${POSTGRES_DB:-opendoors_billing}
    volumes:
<<<<<<< HEAD
      - postgres_data:/var/lib/postgresql/data/
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-opendoors_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-opendoors_password}
      POSTGRES_DB: ${POSTGRES_DB:-opendoors_db}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-opendoors_user} -d ${POSTGRES_DB:-opendoors_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - opendoors_network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: opendoors_pgadmin
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@opendoors.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - opendoors_network
=======
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-opendoors_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
>>>>>>> refs/remotes/origin/master

  # Backend FastAPI
  backend:
    build: 
      context: .
<<<<<<< HEAD
      dockerfile: Dockerfile.backend
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./uploads:/app/uploads
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-opendoors_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-opendoors_password}
      POSTGRES_SERVER: db
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-opendoors_db}
      DATABASE_URL: postgresql://${POSTGRES_USER:-opendoors_user}:${POSTGRES_PASSWORD:-opendoors_password}@db:5432/${POSTGRES_DB:-opendoors_db}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - opendoors_network

  frontend:
    container_name: opendoors_frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    command: npm run dev -- --host 0.0.0.0 --port 5000
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    ports:
      - "5000:5000"
    environment:
      - VITE_API_URL=http://localhost:8000
    depends_on:
      backend:
        condition: service_healthy
    stdin_open: true
    tty: true
    restart: unless-stopped
    networks:
      - opendoors_network

volumes:
  postgres_data:
  pgadmin_data:

networks:
  opendoors_network:
    driver: bridge
=======
      dockerfile: Dockerfile
    container_name: opendoors_backend
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-opendoors_user}:${POSTGRES_PASSWORD:-TuPasswordSegura}@db:5432/${POSTGRES_DB:-opendoors_billing}
      SECRET_KEY: ${SECRET_KEY:-cambiar-en-produccion}
      AZURE_OPENAI_ENDPOINT: ${AZURE_OPENAI_ENDPOINT:-}
      AZURE_OPENAI_API_KEY: ${AZURE_OPENAI_API_KEY:-}
      AZURE_DOC_INTELLIGENCE_ENDPOINT: ${AZURE_DOC_INTELLIGENCE_ENDPOINT:-}
      AZURE_DOC_INTELLIGENCE_KEY: ${AZURE_DOC_INTELLIGENCE_KEY:-}
    ports:
      - "5000:5000"
    volumes:
      - ./src:/app/src
    command: gunicorn src.main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:5000

  # Frontend React (opcional - para producciÃ³n)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: opendoors_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend

volumes:
  postgres_data:
>>>>>>> refs/remotes/origin/master
